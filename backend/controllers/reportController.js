const PDFDocument = require("pdfkit");
const { Parser } = require("json2csv");
const Transaction = require("../models/Transaction");
const User = require("../models/user");
const ExcelJS = require('exceljs'); // Add this import

// Utility: Format date DD-MM-YYYY
const formatDate = (date) => {
  const d = new Date(date);
  return `${d.getDate().toString().padStart(2, "0")}-${(d.getMonth() + 1)
    .toString()
    .padStart(2, "0")}-${d.getFullYear()}`;
};

// Utility: Format currency
const formatCurrency = (amount) => {
  return `Rs. ${amount.toLocaleString('en-IN')}`;
};

// Utility: Add header to every page
const addHeader = (doc, pageNumber) => {
  doc
    .fontSize(9)
    .fillColor("#94A3B8")
    .font("Helvetica");
  
  doc.text("MyGajanji", 50, 30);
  doc.text(`Page ${pageNumber}`, 495, 30, { align: "right" });
  
  doc.moveTo(50, 50).lineTo(545, 50).strokeColor("#E2E8F0").lineWidth(1).stroke();
};

// Utility: Add footer to every page
const addFooter = (doc) => {
  const pageHeight = doc.page.height;
  const footerY = pageHeight - 50;
  
  doc.moveTo(50, footerY - 10).lineTo(545, footerY - 10).strokeColor("#E2E8F0").lineWidth(1).stroke();
  
  doc
    .fontSize(9)
    .fillColor("#94A3B8")
    .font("Helvetica")
    .text(
      "Generated by MyGajanji â€¢ Personal Money Management App",
      50,
      footerY,
      { align: "center", width: 495 }
    );
};

// Check if we need a new page with dynamic threshold
const needsNewPage = (currentY, contentHeight = 100) => {
  const pageHeight = 842; // A4 height in points
  const bottomMargin = 80; // Space needed for footer and buffer
  return (currentY + contentHeight) > (pageHeight - bottomMargin);
};

// ============================
// @desc   GET /api/reports?from=...&to=...
// ============================
exports.getReport = async (req, res) => {
  try {
    const userId = req.user._id;
    const { from, to } = req.query;

    const start = new Date(from);
    const end = new Date(to);
    end.setHours(23, 59, 59, 999);

    const transactions = await Transaction.find({
      user: userId,
      date: { $gte: start, $lte: end },
    }).sort({ date: -1 });

    const totalIncome = transactions
      .filter((t) => t.type === "income")
      .reduce((sum, t) => sum + t.amount, 0);

    const totalExpense = transactions
      .filter((t) => t.type === "expense")
      .reduce((sum, t) => sum + t.amount, 0);

    return res.status(200).json({
      success: true,
      data: {
        totalIncome,
        totalExpense,
        transactions,
      },
    });
  } catch (error) {
    console.error("Error generating report:", error);
    res.status(500).json({ success: false, message: "Server error" });
  }
};

// ============================
// @desc   GET /api/reports/download/pdf?from=...&to=...
// ============================
exports.downloadPDF = async (req, res) => {
  try {
    const user = req.user;
    const { from, to } = req.query;

    const start = new Date(from);
    const end = new Date(to);
    end.setHours(23, 59, 59, 999);

    const transactions = await Transaction.find({
      user: user._id,
      date: { $gte: start, $lte: end },
    }).sort({ date: -1 });

    const totalIncome = transactions
      .filter((t) => t.type === "income")
      .reduce((sum, t) => sum + t.amount, 0);
    const totalExpense = transactions
      .filter((t) => t.type === "expense")
      .reduce((sum, t) => sum + t.amount, 0);
    const netBalance = totalIncome - totalExpense;

    const doc = new PDFDocument({ 
      margin: 50,
      size: 'A4',
      bufferPages: true
    });

    res.setHeader("Content-Type", "application/pdf");
    res.setHeader(
      "Content-Disposition",
      `attachment; filename=MyGajanji_Financial_Report_${from}_to_${to}.pdf`
    );

    doc.pipe(res);

    let pageNumber = 1;

    // === HEADER (First Page Only) ===
    addHeader(doc, pageNumber);

    // === TITLE ===
    let currentY = 80;
    doc.font("Helvetica-Bold").fontSize(28).fillColor("#1E40AF");
    doc.text("Financial Report", 50, currentY, { align: "center", width: 495 });
    
    currentY = 115;
    doc.font("Helvetica").fontSize(12).fillColor("#64748B");
    doc.text("Personal Money Management", 50, currentY, { align: "center", width: 495 });

    // === REPORT INFO CARD ===
    currentY = 155;
    const infoCardHeight = 90;
    
    doc.rect(50, currentY, 495, infoCardHeight).fillAndStroke("#F8FAFC", "#E2E8F0");
    
    // Left side - Report Period
    doc.font("Helvetica").fontSize(10).fillColor("#64748B");
    doc.text("Report Period", 70, currentY + 20);
    
    doc.font("Helvetica-Bold").fontSize(12).fillColor("#1E293B");
    doc.text(`${formatDate(from)} to ${formatDate(to)}`, 70, currentY + 40);
    
    // Right side - Generated For
    doc.font("Helvetica").fontSize(10).fillColor("#64748B");
    doc.text("Generated For", 320, currentY + 20);
    
    doc.font("Helvetica-Bold").fontSize(12).fillColor("#1E293B");
    doc.text(user.name, 320, currentY + 40);
    
    doc.font("Helvetica").fontSize(9).fillColor("#64748B");
    doc.text(user.email, 320, currentY + 58);

    // === FINANCIAL SUMMARY SECTION ===
    currentY += infoCardHeight + 35;
    
    doc.font("Helvetica-Bold").fontSize(16).fillColor("#1E40AF");
    doc.text("Financial Summary", 50, currentY);
    
    currentY += 24;
    doc.moveTo(50, currentY).lineTo(545, currentY).strokeColor("#1E40AF").lineWidth(2).stroke();
    
    currentY += 30;

    // === SUMMARY BOXES ===
    const summaryY = currentY;
    const boxWidth = 155;
    const boxHeight = 85;
    const boxGap = 15;
    
    // Income Box
    doc.rect(50, summaryY, boxWidth, boxHeight).fillAndStroke("#F0FDF4", "#BBF7D0");
    doc.font("Helvetica").fontSize(10).fillColor("#166534");
    doc.text("Total Income", 65, summaryY + 18);
    doc.font("Helvetica-Bold").fontSize(16).fillColor("#16A34A");
    doc.text(formatCurrency(totalIncome), 65, summaryY + 42);
    
    // Expense Box
    const expenseX = 50 + boxWidth + boxGap;
    doc.rect(expenseX, summaryY, boxWidth, boxHeight).fillAndStroke("#FEF2F2", "#FECACA");
    doc.font("Helvetica").fontSize(10).fillColor("#991B1B");
    doc.text("Total Expense", expenseX + 15, summaryY + 18);
    doc.font("Helvetica-Bold").fontSize(16).fillColor("#DC2626");
    doc.text(formatCurrency(totalExpense), expenseX + 15, summaryY + 42);
    
    // Net Balance Box
    const netX = 50 + (boxWidth + boxGap) * 2;
    const netColor = netBalance >= 0 ? "#16A34A" : "#DC2626";
    const netBg = netBalance >= 0 ? "#F0FDF4" : "#FEF2F2";
    const netBorder = netBalance >= 0 ? "#BBF7D0" : "#FECACA";
    const netLabelColor = netBalance >= 0 ? "#166534" : "#991B1B";
    
    doc.rect(netX, summaryY, boxWidth, boxHeight).fillAndStroke(netBg, netBorder);
    doc.font("Helvetica").fontSize(10).fillColor(netLabelColor);
    doc.text("Net Balance", netX + 15, summaryY + 18);
    doc.font("Helvetica-Bold").fontSize(16).fillColor(netColor);
    doc.text(formatCurrency(netBalance), netX + 15, summaryY + 42);
    
    currentY = summaryY + boxHeight + 35;

    // === INCOME TRANSACTIONS SECTION ===
    const incomes = transactions.filter((t) => t.type === "income");
    
    // Check if we need a new page before starting income section
    // Calculate required height: section header (60) + table header (30) + at least one row (25)
    if (needsNewPage(currentY, 115)) {
      doc.addPage();
      pageNumber++;
      addHeader(doc, pageNumber);
      currentY = 80;
    }
    
    doc.font("Helvetica-Bold").fontSize(15).fillColor("#16A34A");
    doc.text(`Income Transactions (${incomes.length})`, 50, currentY);
    
    currentY += 24;
    doc.moveTo(50, currentY).lineTo(545, currentY).strokeColor("#16A34A").lineWidth(2).stroke();
    
    currentY += 25;
    
    if (incomes.length > 0) {
      // Table Header
      const headerY = currentY;
      doc.rect(50, headerY, 495, 30).fillAndStroke("#F1F5F9", "#E2E8F0");
      
      doc.font("Helvetica-Bold").fontSize(11).fillColor("#475569");
      doc.text("Amount", 65, headerY + 11);
      doc.text("Category", 210, headerY + 11);
      doc.text("Date", 420, headerY + 11);
      
      currentY = headerY + 40;
      
      // Table Rows
      incomes.forEach((t, index) => {
        // Check if we need a new page before adding this row
        // Each row takes approximately 25 points + 8 points for separator line
        if (needsNewPage(currentY, 33)) {
          doc.addPage();
          pageNumber++;
          addHeader(doc, pageNumber);
          currentY = 80;
          
          // Repeat header for new page
          const newHeaderY = currentY;
          doc.rect(50, newHeaderY, 495, 30).fillAndStroke("#F1F5F9", "#E2E8F0");
          doc.font("Helvetica-Bold").fontSize(11).fillColor("#475569");
          doc.text("Amount", 65, newHeaderY + 11);
          doc.text("Category", 210, newHeaderY + 11);
          doc.text("Date", 420, newHeaderY + 11);
          currentY = newHeaderY + 40;
        }
        
        const rowY = currentY;
        doc.font("Helvetica").fontSize(10).fillColor("#1E293B");
        doc.text(formatCurrency(t.amount), 65, rowY);
        doc.text(t.category, 210, rowY);
        doc.text(formatDate(t.date), 420, rowY);
        
        currentY += 25;
        // Only add line if not the last item
        if (index < incomes.length - 1) {
          doc.moveTo(50, currentY).lineTo(545, currentY).strokeColor("#F1F5F9").lineWidth(1).stroke();
          currentY += 8;
        }
      });
      
      currentY += 20;
    } else {
      doc.font("Helvetica-Oblique").fontSize(11).fillColor("#94A3B8");
      doc.text("No income transactions found for this period.", 50, currentY);
      currentY += 45;
    }

    // === EXPENSE TRANSACTIONS SECTION ===
    const expenses = transactions.filter((t) => t.type === "expense");
    
    // Check if we need a new page before starting expense section
    if (needsNewPage(currentY, 115)) {
      doc.addPage();
      pageNumber++;
      addHeader(doc, pageNumber);
      currentY = 80;
    }
    
    doc.font("Helvetica-Bold").fontSize(15).fillColor("#DC2626");
    doc.text(`Expense Transactions (${expenses.length})`, 50, currentY);
    
    currentY += 24;
    doc.moveTo(50, currentY).lineTo(545, currentY).strokeColor("#DC2626").lineWidth(2).stroke();
    
    currentY += 25;
    
    if (expenses.length > 0) {
      // Table Header
      const headerY = currentY;
      doc.rect(50, headerY, 495, 30).fillAndStroke("#F1F5F9", "#E2E8F0");
      
      doc.font("Helvetica-Bold").fontSize(11).fillColor("#475569");
      doc.text("Amount", 65, headerY + 11);
      doc.text("Category", 210, headerY + 11);
      doc.text("Date", 420, headerY + 11);
      
      currentY = headerY + 40;
      
      // Table Rows
      expenses.forEach((t, index) => {
        // Check if we need a new page before adding this row
        if (needsNewPage(currentY, 33)) {
          doc.addPage();
          pageNumber++;
          addHeader(doc, pageNumber);
          currentY = 80;
          
          // Repeat header for new page
          const newHeaderY = currentY;
          doc.rect(50, newHeaderY, 495, 30).fillAndStroke("#F1F5F9", "#E2E8F0");
          doc.font("Helvetica-Bold").fontSize(11).fillColor("#475569");
          doc.text("Amount", 65, newHeaderY + 11);
          doc.text("Category", 210, newHeaderY + 11);
          doc.text("Date", 420, newHeaderY + 11);
          currentY = newHeaderY + 40;
        }
        
        const rowY = currentY;
        doc.font("Helvetica").fontSize(10).fillColor("#1E293B");
        doc.text(formatCurrency(t.amount), 65, rowY);
        doc.text(t.category, 210, rowY);
        doc.text(formatDate(t.date), 420, rowY);
        
        currentY += 25;
        // Only add line if not the last item
        if (index < expenses.length - 1) {
          doc.moveTo(50, currentY).lineTo(545, currentY).strokeColor("#F1F5F9").lineWidth(1).stroke();
          currentY += 8;
        }
      });
    } else {
      doc.font("Helvetica-Oblique").fontSize(11).fillColor("#94A3B8");
      doc.text("No expense transactions found for this period.", 50, currentY);
    }


    doc.end();
  } catch (error) {
    console.error("PDF generation failed:", error);
    res.status(500).json({ success: false, message: "PDF generation failed" });
  }
};

// ============================
// @desc   GET /api/reports/download/excel?from=...&to=...
// ============================
exports.downloadExcel = async (req, res) => {
  try {
    const userId = req.user._id;
    const user = req.user;
    const { from, to } = req.query;

    const start = new Date(from);
    const end = new Date(to);
    end.setHours(23, 59, 59, 999);

    const transactions = await Transaction.find({
      user: userId,
      date: { $gte: start, $lte: end },
    }).sort({ date: -1 });

    const totalIncome = transactions
      .filter((t) => t.type === "income")
      .reduce((sum, t) => sum + t.amount, 0);
    const totalExpense = transactions
      .filter((t) => t.type === "expense")
      .reduce((sum, t) => sum + t.amount, 0);
    const netBalance = totalIncome - totalExpense;

    // Create a new workbook
    const workbook = new ExcelJS.Workbook();
    
    // Add a worksheet
    const worksheet = workbook.addWorksheet('Financial Report');

    // Set up styles
    const headerStyle = {
      font: { bold: true, color: { argb: 'FFFFFFFF' }, size: 12 },
      fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF1E40AF' } },
      alignment: { horizontal: 'center', vertical: 'middle' },
      border: {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' }
      }
    };

    const titleStyle = {
      font: { bold: true, size: 16, color: { argb: 'FF1E40AF' } },
      alignment: { horizontal: 'center', vertical: 'middle' }
    };

    const subtitleStyle = {
      font: { size: 12, color: { argb: 'FF64748B' } },
      alignment: { horizontal: 'center', vertical: 'middle' }
    };

    const summaryHeaderStyle = {
      font: { bold: true, size: 14, color: { argb: 'FF1E40AF' } },
      fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF1F5F9' } },
      border: {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' }
      }
    };

    const incomeStyle = {
      font: { bold: true, color: { argb: 'FF16A34A' } },
      fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF0FDF4' } }
    };

    const expenseStyle = {
      font: { bold: true, color: { argb: 'FFDC2626' } },
      fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFFEF2F2' } }
    };

    const dataHeaderStyle = {
      font: { bold: true, color: { argb: 'FF475569' } },
      fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF8FAFC' } },
      border: {
        top: { style: 'thin' },
        left: { style: 'thin' },
        bottom: { style: 'thin' },
        right: { style: 'thin' }
      }
    };

    // Set column widths
    worksheet.columns = [
      { width: 15 }, // A: Amount
      { width: 20 }, // B: Category
      { width: 15 }, // C: Type
      { width: 15 }, // D: Date
      { width: 30 }  // E: Description
    ];

    let rowIndex = 1;

    // === TITLE SECTION ===
    worksheet.mergeCells(`A${rowIndex}:E${rowIndex}`);
    worksheet.getCell(`A${rowIndex}`).value = 'Financial Report';
    worksheet.getCell(`A${rowIndex}`).style = titleStyle;
    rowIndex++;

    worksheet.mergeCells(`A${rowIndex}:E${rowIndex}`);
    worksheet.getCell(`A${rowIndex}`).value = 'Personal Money Management';
    worksheet.getCell(`A${rowIndex}`).style = subtitleStyle;
    rowIndex += 2;

    // === REPORT INFO ===
    worksheet.mergeCells(`A${rowIndex}:E${rowIndex}`);
    worksheet.getCell(`A${rowIndex}`).value = 'Report Information';
    worksheet.getCell(`A${rowIndex}`).style = summaryHeaderStyle;
    rowIndex++;

    worksheet.getCell(`A${rowIndex}`).value = 'Report Period:';
    worksheet.getCell(`A${rowIndex}`).font = { bold: true };
    worksheet.getCell(`B${rowIndex}`).value = `${formatDate(from)} to ${formatDate(to)}`;
    rowIndex++;

    worksheet.getCell(`A${rowIndex}`).value = 'Generated For:';
    worksheet.getCell(`A${rowIndex}`).font = { bold: true };
    worksheet.getCell(`B${rowIndex}`).value = user.name;
    rowIndex++;

    worksheet.getCell(`A${rowIndex}`).value = 'Email:';
    worksheet.getCell(`A${rowIndex}`).font = { bold: true };
    worksheet.getCell(`B${rowIndex}`).value = user.email;
    rowIndex += 2;

    // === FINANCIAL SUMMARY ===
    worksheet.mergeCells(`A${rowIndex}:E${rowIndex}`);
    worksheet.getCell(`A${rowIndex}`).value = 'Financial Summary';
    worksheet.getCell(`A${rowIndex}`).style = summaryHeaderStyle;
    rowIndex++;

    worksheet.getCell(`A${rowIndex}`).value = 'Total Income:';
    worksheet.getCell(`A${rowIndex}`).style = incomeStyle;
    worksheet.getCell(`B${rowIndex}`).value = totalIncome;
    worksheet.getCell(`B${rowIndex}`).numFmt = '"Rs." #,##0.00';
    rowIndex++;

    worksheet.getCell(`A${rowIndex}`).value = 'Total Expense:';
    worksheet.getCell(`A${rowIndex}`).style = expenseStyle;
    worksheet.getCell(`B${rowIndex}`).value = totalExpense;
    worksheet.getCell(`B${rowIndex}`).numFmt = '"Rs." #,##0.00';
    rowIndex++;

    worksheet.getCell(`A${rowIndex}`).value = 'Net Balance:';
    worksheet.getCell(`A${rowIndex}`).font = { bold: true };
    worksheet.getCell(`B${rowIndex}`).value = netBalance;
    worksheet.getCell(`B${rowIndex}`).numFmt = '"Rs." #,##0.00';
    worksheet.getCell(`B${rowIndex}`).font = { 
      bold: true, 
      color: { argb: netBalance >= 0 ? 'FF16A34A' : 'FFDC2626' } 
    };
    rowIndex += 2;

    // === TRANSACTIONS HEADER ===
    if (transactions.length > 0) {
      worksheet.mergeCells(`A${rowIndex}:E${rowIndex}`);
      worksheet.getCell(`A${rowIndex}`).value = `All Transactions (${transactions.length})`;
      worksheet.getCell(`A${rowIndex}`).style = summaryHeaderStyle;
      rowIndex++;

      // Table headers
      const headers = ['Amount', 'Category', 'Type', 'Date', 'Description'];
      headers.forEach((header, index) => {
        const cell = worksheet.getCell(`${String.fromCharCode(65 + index)}${rowIndex}`);
        cell.value = header;
        cell.style = dataHeaderStyle;
      });
      rowIndex++;

      // Transaction data
      transactions.forEach(transaction => {
        worksheet.getCell(`A${rowIndex}`).value = transaction.amount;
        worksheet.getCell(`A${rowIndex}`).numFmt = '"Rs." #,##0.00';
        
        worksheet.getCell(`B${rowIndex}`).value = transaction.category;
        
        worksheet.getCell(`C${rowIndex}`).value = transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1);
        worksheet.getCell(`C${rowIndex}`).font = { 
          color: { argb: transaction.type === 'income' ? 'FF16A34A' : 'FFDC2626' } 
        };
        
        worksheet.getCell(`D${rowIndex}`).value = formatDate(transaction.date);
        worksheet.getCell(`E${rowIndex}`).value = transaction.description || '';
        
        // Add borders to data cells
        ['A', 'B', 'C', 'D', 'E'].forEach(col => {
          worksheet.getCell(`${col}${rowIndex}`).border = {
            top: { style: 'thin' },
            left: { style: 'thin' },
            bottom: { style: 'thin' },
            right: { style: 'thin' }
          };
        });
        
        rowIndex++;
      });
    } else {
      worksheet.mergeCells(`A${rowIndex}:E${rowIndex}`);
      worksheet.getCell(`A${rowIndex}`).value = 'No transactions found for this period';
      worksheet.getCell(`A${rowIndex}`).style = { 
        font: { italic: true, color: { argb: 'FF94A3B8' } },
        alignment: { horizontal: 'center' }
      };
      rowIndex++;
    }

    // Set response headers
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', `attachment; filename=MyGajanji_Financial_Report_${from}_to_${to}.xlsx`);

    // Write workbook to response
    await workbook.xlsx.write(res);
    res.end();

  } catch (error) {
    console.error("Excel generation failed:", error);
    res.status(500).json({ success: false, message: "Excel generation failed" });
  }
};